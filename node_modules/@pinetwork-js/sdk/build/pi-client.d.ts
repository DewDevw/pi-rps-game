import { type APIPartialPayment, type APIPayment, type APIUserScopes } from '@pinetwork-js/api-typing';
import { PaymentHandler, RequestHandler } from './handlers';
import type { AuthResult, ClientInitOptions, PaymentCallbacks, Permission, PiHostApp } from './types';
/**
 * Available SDK versions
 */
export declare const versions: readonly ["2.0"];
/**
 * Main class of the SDK
 */
export declare class PiClient {
    /**
     * Whether the SDK is ready to be used or not
     */
    initialized: boolean;
    /**
     * The request handler for API requests
     */
    api: RequestHandler;
    /**
     * The list of scopes consented by the user
     */
    consentedScopes: APIUserScopes[];
    /**
     * Callback function triggered if an incomplete payment is found during the process of
     * authentication or payment creation
     */
    onIncompletePaymentFound: (payment: APIPayment) => void;
    /**
     * Initialize the SDK
     *
     * @param options - Options to initialize the SDK
     */
    init(options: ClientInitOptions): Promise<void>;
    /**
     * Authenticate the user
     *
     * @param scopes - The list of requested scopes
     * @param onIncompletePaymentFound - Callback function triggered if an incomplete payment is found
     * @returns information about the authenticated user
     */
    authenticate(scopes: APIUserScopes[], onIncompletePaymentFound: (payment: APIPayment) => void): Promise<AuthResult>;
    /**
     * Create a payment
     *
     * @param paymentData - The information about the payment
     * @param callbacks - Callback functions for the payment process
     * @returns the payment handler for the created payment
     */
    createPayment(paymentData: APIPartialPayment, callbacks: PaymentCallbacks): PaymentHandler;
    /**
     * Open the share dialog
     *
     * @param title - The title of the message
     * @param sharingMessage - The message to share
     */
    openShareDialog(title: string, sharingMessage: string): Promise<void>;
    /**
     * Open a conversation
     *
     * @param conversationId - The conversation id
     */
    openConversation(conversationId: number): Promise<void>;
    /**
     * Get the list of the native feature available in client platform
     *
     * @returns the list of native features available in client platform
     */
    nativeFeaturesList(): Promise<("inline_media" | "request_permission")[]>;
    /**
     * Copy given text to user clipboard
     *
     * @param text - The text to copy
     */
    copyText(text: string): Promise<void>;
    /**
     * Request for a permission to the user
     *
     * @param permission - The permission to request
     * @returns Whether or not the requested permission has been granted
     */
    requestPermission(permission: Permission): Promise<boolean>;
    /**
     * Open the given url in system browser
     *
     * @param url - The url to open
     */
    openUrlInSystemBrowser(url: string): Promise<void>;
    /**
     * Get the Pi Network hosting app behind the current app
     *
     * @returns The Pi Network hosting app
     */
    getPiHostApp(): PiHostApp;
    /**
     * Initialize the usage tracking system
     */
    private initTracking;
    /**
     * Check if the SDK client has been initialized before use
     */
    private checkInitialized;
}
