import type { MessagePromise, RequestMessage, ResponseMessage } from '../types';
/**
 * Handler for messages
 */
export declare class MessageHandler {
    /**
     * Last emitted message id
     */
    static lastEmittedId: number;
    /**
     * A list of emitted promises
     */
    static emittedPromises: Record<number, MessagePromise>;
    /**
     * Whether the application is executed in the Pi Network sandbox
     */
    private static sandboxMode;
    /**
     * @returns the host platform URL of the application
     */
    static getHostPlatformURL(): string;
    /**
     * @param sandboxMode - True if in sandbox, false otherwhise
     */
    static setSandboxMode(sandboxMode: boolean): void;
    /**
     * Send a message to the Pi Network hosting page
     *
     * @param message - The message to send
     * @returns the message returned by the Pi Network hosting page
     */
    static sendSDKMessage<M extends RequestMessage<M['type']>>(message: M): Promise<ResponseMessage<M['type']> | undefined>;
    /**
     * Handle message events
     *
     * @param event - The message event received
     */
    static handleIncomingMessage(event: MessageEvent): void;
}
