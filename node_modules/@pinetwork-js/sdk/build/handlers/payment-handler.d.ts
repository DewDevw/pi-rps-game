import { type APIPartialPayment, type APIPayment } from '@pinetwork-js/api-typing';
import type { PaymentCallbacks, PaymentStatus } from '../types';
/**
 * Handler for payments
 */
export declare class PaymentHandler {
    /**
     * Information about the payment
     */
    readonly paymentData: Omit<APIPartialPayment, 'uid'>;
    /**
     * Callback functions for the payment process
     */
    readonly callbacks: PaymentCallbacks;
    /**
     * Callback function triggered if an incomplete payment is found
     */
    readonly onIncompletePaymentFound: (payment: APIPayment) => void;
    /**
     * Number of retries allowed
     */
    retryCounter: number;
    constructor(
    /**
     * Information about the payment
     */
    paymentData: Omit<APIPartialPayment, 'uid'>, 
    /**
     * Callback functions for the payment process
     */
    callbacks: PaymentCallbacks, 
    /**
     * Callback function triggered if an incomplete payment is found
     */
    onIncompletePaymentFound: (payment: APIPayment) => void);
    /**
     * Check if there is a pending payment
     *
     * @param onIncompletePaymentFound - Callback function triggered if an incomplete payment is found
     */
    static checkForPendingPayment(onIncompletePaymentFound: (payment: APIPayment) => void): Promise<void>;
    retryableCallback(retryCallback: () => void, paymentStatus: PaymentStatus): Promise<void>;
    /**
     * Run the payment flow
     */
    runPaymentFlow(): Promise<void>;
}
