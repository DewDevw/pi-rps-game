"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RequestHandler = void 0;
const api_typing_1 = require("@pinetwork-js/api-typing");
const axios_1 = __importDefault(require("axios"));
const message_types_1 = require("../message-types");
const util_1 = require("../util");
/**
 * Handler for requests
 */
class RequestHandler {
    /**
     * Singleton instance of the class
     */
    static instance;
    /**
     * The application access token
     */
    accessToken;
    /**
     * The application backend url
     */
    backendURL;
    /**
     * The application frontend url
     */
    frontendURL;
    /**
     * The axios client for the requests
     */
    axiosClient;
    constructor() {
        RequestHandler.instance = this;
    }
    /**
     * Get options for axios API requests
     *
     * @returns The API request options
     */
    get options() {
        return {
            headers: this.accessToken ? { Authorization: `Bearer ${this.accessToken}` } : {},
        };
    }
    /**
     * Get the instance of the request handler or create a new one if not found
     *
     * @returns the instance of the request handler
     */
    static getInstance() {
        return RequestHandler.instance ?? new RequestHandler();
    }
    /**
     * Initialize the request handler
     *
     * @param applicationInformation - The application information
     */
    init(applicationInformation) {
        this.accessToken = applicationInformation.accessToken;
        this.backendURL = applicationInformation.backendURL;
        this.frontendURL = applicationInformation.frontendURL;
        this.createAxios();
    }
    /**
     * Handle axios request error
     *
     * @param error - The error of an Axios request
     */
    handleError(error) {
        const errorCode = error.response?.status;
        if (util_1.DEBUG) {
            console.error(error);
        }
        this.sendMessageToPiNetwork({
            type: errorCode !== 401 && errorCode !== 403 ? message_types_1.MessageType.UNKNOWN_ERROR : message_types_1.MessageType.AUTH_ERROR,
        });
    }
    /**
     * Perform a GET API request with the axios client
     *
     * @param route - The URL of the GET request
     * @returns The result of the request if no error occurred
     */
    async get(route) {
        if (!this.axiosClient) {
            return;
        }
        try {
            const { data } = await this.axiosClient.get(route, this.options);
            return data;
        }
        catch (error) {
            if (this.isAxiosError(error)) {
                this.handleError(error);
                throw error;
            }
        }
    }
    /**
     * Perform a POST API request with the axios client
     *
     * @param route - The URL of the GET request
     * @param payload - The data to post
     * @returns The result of the request if no error occurred
     */
    async post(route, payload) {
        if (!this.axiosClient) {
            return;
        }
        try {
            const { data } = await this.axiosClient.post(route, payload, this.options);
            return data;
        }
        catch (error) {
            if (this.isAxiosError(error)) {
                this.handleError(error);
                throw error;
            }
        }
    }
    /**
     * Send a message to the Pi Network hosting page
     *
     * @param message - The message to send
     */
    sendMessageToPiNetwork(message) {
        if (!this.frontendURL) {
            return;
        }
        window.parent.postMessage(JSON.stringify(message), this.frontendURL);
    }
    /**
     * Wait for a specific message of the Pi Network hosting page
     *
     * @param awaitedMessage - The awaited message
     * @returns The expected message if received before timeout
     */
    waitForAction(awaitedMessage) {
        return new Promise((resolve, reject) => {
            if (util_1.DEBUG) {
                console.log('Waiting for action...');
            }
            const timeout = window.setTimeout(() => {
                reject(new Error('timeout'));
            }, 60_000);
            window.addEventListener('message', (event) => {
                const data = this.handlePiNetworkMessage(event, awaitedMessage);
                if (!data) {
                    return;
                }
                window.clearTimeout(timeout);
                resolve(data);
            });
        });
    }
    /**
     * Handle message sent by the Pi Network hosting page
     *
     * @param event - The received message event
     * @param awaitedMessage - The expected message
     * @returns The data of the received message if it match the expected one
     */
    handlePiNetworkMessage(event, awaitedMessage) {
        let parsedData;
        try {
            parsedData = JSON.parse(event.data);
        }
        catch {
            if (util_1.DEBUG) {
                console.warn('Error while parsing request', event, event.data);
            }
            return;
        }
        if (util_1.DEBUG) {
            console.log('Message!', parsedData);
        }
        if (!parsedData) {
            if (util_1.DEBUG) {
                console.warn('Unable to parse action');
            }
            return;
        }
        if (parsedData.type === awaitedMessage.type) {
            return parsedData;
        }
    }
    /**
     * Report an error to the Pi Network Core Team
     *
     * @param action - The action that was running when the error occurred
     * @param message - A message about the error
     * @param data - Some informations returned by the error
     */
    reportError(action, message, data) {
        this.post(api_typing_1.postNetworkError, {
            error: {
                time: (0, util_1.getDateTime)(),
                call: action,
                message,
                data,
            },
        });
    }
    createAxios() {
        if (!this.backendURL) {
            return;
        }
        this.axiosClient = axios_1.default.create({ baseURL: this.backendURL, timeout: 20_000 });
    }
    isAxiosError(candidate) {
        return !!candidate && typeof candidate === 'object' && 'isAxiosError' in candidate;
    }
}
exports.RequestHandler = RequestHandler;
