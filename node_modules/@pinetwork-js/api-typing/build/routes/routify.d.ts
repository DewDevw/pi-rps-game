export type Route<R = void, P = undefined> = string & {
    _: never;
};
export type RoutePayload<E> = E extends Route<any, infer R> ? R : void;
export type RouteResult<E> = E extends Route<infer R> ? R : undefined;
export declare function routify<R = void, P = undefined, K extends readonly string[] = readonly string[]>(literals: TemplateStringsArray, ...keys: K): (data: Record<K[number], string>) => Route<R, P>;
